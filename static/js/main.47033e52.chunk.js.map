{"version":3,"sources":["components/FoodCard/index.js","components/Nav/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["FoodCard","props","className","alt","name","src","image","onClick","clickCount","id","Nav","score","highScore","Wrapper","children","App","state","foods","gameOver","setState","console","log","this","forEach","count","alert","find","o","i","sort","Math","random","map","card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0oCAceA,MAXf,SAAkBC,GACd,OAEI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,+BAA+BC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,QAAS,kBAAMN,EAAMO,WAAWP,EAAMQ,U,MCMxHC,MAXf,SAAaT,GACT,OACI,yBAAKC,UAAU,0CACX,wBAAIA,UAAU,kBACV,wBAAIA,UAAU,QAAd,gBACA,wBAAIA,UAAU,SAAd,WAA+BD,EAAMU,MAArC,kBAA2DV,EAAMW,UAAjE,Q,MCDDC,MAJf,SAAiBZ,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAMa,W,OCkE5BC,G,iNA7DbC,MAAQ,CACNC,QAEAN,MAAO,EACPC,UAAW,G,EAIbM,SAAW,WAWT,OAVI,EAAKF,MAAML,MAAQ,EAAKK,MAAMJ,WAChC,EAAKO,SAAS,CAAEP,UAAW,EAAKI,MAAML,QAAS,WAC7CS,QAAQC,IAAIC,KAAKN,MAAMJ,cAG3B,EAAKI,MAAMC,MAAMM,SAAQ,SAAAvB,GACvBA,EAASwB,MAAQ,KAEnBC,MAAM,yBAAD,OAA0B,EAAKT,MAAML,QAC1C,EAAKQ,SAAS,CAAER,MAAO,KAChB,G,EAGTH,WAAa,SAAAC,GACX,EAAKO,MAAMC,MAAMS,MAAK,SAACC,EAAGC,GACxB,GAAID,EAAElB,KAAOA,EAAI,CACf,GAAuB,IAAnBQ,EAAMW,GAAGJ,MAMX,OALAP,EAAMW,GAAGJ,MAAQP,EAAMW,GAAGJ,MAAQ,EAClC,EAAKL,SAAS,CAAER,MAAO,EAAKK,MAAML,MAAQ,IAAK,WAC7CS,QAAQC,IAAIC,KAAKN,MAAML,UAEzB,EAAKK,MAAMC,MAAMY,MAAK,kBAAMC,KAAKC,SAAW,OACrC,EAEP,EAAKb,gB,wEAMH,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEN,UAAWU,KAAKN,MAAMJ,UACtBD,MAAOW,KAAKN,MAAML,QAEpB,8GACCW,KAAKN,MAAMC,MAAMe,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACEzB,WAAY,EAAKA,WACjBC,GAAIwB,EAAKxB,GACTyB,IAAKD,EAAKxB,GACVL,KAAM6B,EAAK7B,KACXE,MAAO2B,EAAK3B,gB,GAtDN6B,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.47033e52.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction FoodCard(props) {\r\n    return (\r\n\r\n        <div className=\"card\">\r\n            <div className=\"img-container\">\r\n                <img className=\"img-thumbnail img-responsive\" alt={props.name} src={props.image} onClick={() => props.clickCount(props.id)} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FoodCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Nav(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-default navbar-fixed-top\">\r\n            <ul className=\"center navList\">\r\n                <li className=\"logo\">Clicky Game!</li>\r\n                <li className=\"score\"> Score: {props.score} | High Score: {props.highScore} </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport FoodCard from \"./components/FoodCard\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport foods from \"./foods.json\";\n// import logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    foods,\n    // clicked: [],\n    score: 0,\n    highScore: 0,\n  };\n\n\n  gameOver = () => {\n    if (this.state.score > this.state.highScore) {\n      this.setState({ highScore: this.state.score }, function () {\n        console.log(this.state.highScore);\n      });\n    }\n    this.state.foods.forEach(FoodCard => {\n      FoodCard.count = 0;\n    });\n    alert(`Game Over :( \\nscore: ${this.state.score}`);\n    this.setState({ score: 0 });\n    return true;\n  }\n\n  clickCount = id => {\n    this.state.foods.find((o, i) => {\n      if (o.id === id) {\n        if (foods[i].count === 0) {\n          foods[i].count = foods[i].count + 1;\n          this.setState({ score: this.state.score + 1 }, function () {\n            console.log(this.state.score);\n          });\n          this.state.foods.sort(() => Math.random() - 0.5)\n          return true;\n        } else {\n          this.gameOver();\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          highScore={this.state.highScore}\n          score={this.state.score}\n        />\n        <h3> Click on a food image to earn points, but don't click on any more than once! </h3>\n        {this.state.foods.map(card => (\n          <FoodCard\n            clickCount={this.clickCount}\n            id={card.id}\n            key={card.id}\n            name={card.name}\n            image={card.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}